% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_newdata.R
\name{map_newdata}
\alias{map_newdata}
\title{Map newdata to a predinfo object}
\usage{
map_newdata(
  x,
  newdata,
  binary_outcome = NULL,
  survival_time = NULL,
  event_indicator = NULL
)
}
\arguments{
\item{x}{an object of class "predinfo"}

\item{newdata}{data.frame upon which the prediction model should be applied
(for subsequent validation/model updating/model aggregation).}

\item{binary_outcome}{Character variable giving the name of the column in
\code{newdata} that represents the observed outcomes. Only relevant for
\code{model_type}="logistic"; leave as \code{NULL} otherwise. Leave as
\code{NULL} if \code{newdata} does not contain any outcomes.}

\item{survival_time}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival times. Only relevant
for \code{model_type}="survival"; leave as \code{NULL} otherwise. Leave as
\code{NULL} if \code{newdata} does not contain any survival outcomes.}

\item{event_indicator}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival indicator (1 for
event, 0 for censoring). Only relevant for \code{model_type}="survival";
leave as \code{NULL} otherwise. Leave as \code{NULL} if \code{newdata} does
not contain any survival outcomes.}
}
\value{
Returns a list of the predinfo object with the newdata and outcomes
}
\description{
This function takes a predinfo object and applies (maps) a newdata to this
object to check there is consistency between the two. This function is not
usually called directly, but rather within  other functions within the
package, such as \code{pred_predict}, \code{pred_validate} and
\code{pred_stacked_regression}.
}
\details{
This function maps a new dataset onto a pred_info object. The new
dataset might be a validation dataset (to test the performance of the
existing prediction model) and/or it might be the dataset on which one
wishes to apply model updating methods to revise the model. In any case,
this should be specified in \code{newdata} as a data.frame. Each row should
be an observation (e.g. patient) and each variable/column should be a
predictor variable. The predictor variables need to include (as a minimum)
all of the predictor variables that are included in the existing prediction
model.

\code{binary_outcome}, \code{survival_time} and \code{event_indicator} are
used to specify the outcome variable(s) within \code{newdata}, if relevant
(use \code{binary_outcome} if \code{model_type} = "logistic", or use
\code{survival_time} and \code{event_indicator} if \code{model_type} =
"survival"). For example, if validating an existing model, then these
inputs specify the columns of \code{newdata} that will be used for
assessing predictive performance of the predictions in the validation
dataset. If \code{newdata} does not contain outcomes, then leave these
inputs to the default of \code{NULL}.
}
\examples{
#Example 1 - logistic regression existing model, with outcome specified; uses
#            an example dataset within the package
model1 <- pred_input_info(model_type = "logistic",
                          model_info = SYNPM$Existing_models[1,])
map_newdata(model1,
            newdata = SYNPM$ValidationData,
            binary_outcome = "Y")

#Example 2 - survival model example; uses an example dataset within the
#             package. Also shows use of pre-processing to handle
#             categorical variables - need converting prior to call
SMART_dummaryvars <- dummyvars(SMART)
model2 <- pred_input_info(model_type = "survival",
                          model_info = data.frame("SEX_M" = 0.53,
                                                  "AGE" = -0.05,
                                                  "SYSTBP" = -0.0055,
                                                  "BMIO" = 0.0325,
                                                  "CARDIAC" = -0.126,
                                                  "DIABETES" = -0.461),
                           baselinehazard = data.frame("t" = 1:5,
                                                       "h" = c(0.12, 0.20,
                                                               0.26, 0.33,
                                                               0.38)))
map_newdata(model2,
            newdata = SMART_dummaryvars,
            survival_time = "TEVENT",
            event_indicator = "EVENT")

#Example 3 - multiple existing models
model3 <- pred_input_info(model_type = "logistic",
                          model_info = SYNPM$Existing_models)
map_newdata(model3,
            newdata = SYNPM$ValidationData,
            binary_outcome = "Y")

}
\seealso{
\code{\link{pred_input_info}}
}
