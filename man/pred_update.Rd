% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pred_update.R
\name{pred_update}
\alias{pred_update}
\title{Perform Model Updating on an Existing Prediction Model}
\usage{
pred_update(
  x,
  update_type = c("intercept_update", "recalibration", "revision"),
  newdata,
  binary_outcome = NULL,
  survival_time = NULL,
  event_indicator = NULL
)
}
\arguments{
\item{x}{an object of class "\code{predinfo}" produced by calling
\code{\link{pred_input_info}} containing information on exactly one
existing prediction model.}

\item{update_type}{character variable specifying the level of updating that
is required}

\item{newdata}{data.frame upon which the prediction models should be
aggregated}

\item{binary_outcome}{Character variable giving the name of the column in
\code{newdata} that represents the observed outcomes. Only relevant for
\code{model_type}="logistic"; leave as \code{NULL} otherwise.}

\item{survival_time}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival times. Only relevant
for \code{model_type}="survival"; leave as \code{NULL} otherwise.}

\item{event_indicator}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival indicator (1 for
event, 0 for censoring). Only relevant for \code{model_type}="survival";
leave as \code{NULL} otherwise.}
}
\value{
A object of class "predinfo" with subclass"\code{predUpdate}". This
is the same as that detailed in \code{\link{pred_input_info}}, with the
added element containing the estimates of the model updating.
}
\description{
This function takes an existing (previously developed) prediction model and
applies various model updating methods to tailor/adapt it to a new dataset.
Various levels of updating are possible, ranging from model re-calibration to
model revision.
}
\details{
The aim of this function is to take an existing (previously
estimated) prediction model, and apply various model discrete model
updating methods (see Su et al. 2018) to tailor the model to a new dataset.

The type of updating method is selected with the \code{update_type}
parameter, with options: "intercept_update", "recalibration" and
"revision". "intercept_update" corrects the overall
calibration-in-the-large of the model, through altering the model intercept
(or baseline hazard) to suit the new dataset. This is achieved by fitting a
logistic model (if the existing model is of type logistic) or time-to-event
model (if the existing model if of type survival) to the new dataset, with
the linear predictor as the only covariate, with the coefficient fixed at
unity (i.e. as an offset). "recalibration" corrects the
calibration-in-the-large and any under/over-fitting, by fitting a logistic
model (if the existing model is of type logistic) or time-to-event model
(if the existing model if of type survival) to the new dataset, with the
linear predictor as the only covariate. Finally, "revision" is the same as
"recalibration" with the addition that individual covariates may also be
updated; this has the effect of also changing the discrimination of the
existing model.

\code{newdata} should be a data.frame, where each row should be an
observation (e.g. patient) and each variable/column should be a predictor
variable. The predictor variables need to include (as a minimum) all of the
predictor variables that are included in the existing prediction model
(i.e., each of the variable names supplied to
\code{\link{pred_input_info}}, through the \code{model_info} parameter,
must match the name of a variables in \code{newdata}).

Any factor variables within \code{newdata} must be converted to dummy (0/1)
variables before calling this function. \code{\link{dummyvars}} can help
with this.

\code{binary_outcome}, \code{survival_time} and \code{event_indicator} are
used to specify the outcome variable(s) within \code{newdata} (use
\code{binary_outcome} if \code{x$model_type} = "logistic", or use
\code{survival_time} and \code{event_indicator} if \code{x$model_type} =
"survival").
}
\examples{
#Example 1 - logistic regression existing model, with outcome specified; uses
#            an example dataset within the package
model1 <- pred_input_info(model_type = "logistic",
                          model_info = SYNPM$Existing_logistic_models[1,])
recalibrated_model1 <- pred_update(x = model1,
                                   update_type = "recalibration",
                                   newdata = SYNPM$ValidationData,
                                   binary_outcome = "Y")
summary(recalibrated_model1)
recalibrated_model1$model_update_results #explore the model updating parameter estimates
#one could then validate this as follows (but this should be adjusted for
#in-sample optimism):
pred_validate(recalibrated_model1, newdata = SYNPM$ValidationData, binary_outcome = "Y")

#Example 2 - update time-to-event model
model2 <- pred_input_info(model_type = "survival",
                          model_info = SYNPM$Existing_TTE_models[1,],
                          baselinehazard = SYNPM$TTE_mod1_baseline)
recalibrated_model2 <- pred_update(x = model2,
                                   newdata = SYNPM$ValidationData,
                                   survival_time = "ETime",
                                   event_indicator = "Status")
summary(recalibrated_model2)

}
\references{
Su TL, Jaki T, Hickey GL, Buchan I, Sperrin M. A review of
statistical updating methods for clinical prediction models. \emph{Stat Methods
Med Res}. 2018 Jan;27(1):185-197. doi: 10.1177/0962280215626466.
}
