% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pred_validate.R
\name{pred_validate}
\alias{pred_validate}
\title{Validate an existing prediction}
\usage{
pred_validate(
  x,
  newdata,
  binary_outcome = NULL,
  survival_time = NULL,
  event_indicator = NULL,
  time_horizon = NULL,
  ...
)
}
\arguments{
\item{x}{an object of class "predinfo"}

\item{newdata}{data.frame upon which the prediction model should be validated}

\item{binary_outcome}{Character variable giving the name of the column in
\code{newdata} that represents the observed outcomes. Only relevant for
\code{model_type}="logistic"; leave as \code{NULL} otherwise.}

\item{survival_time}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival times. Only relevant
for \code{model_type}="survival"; leave as \code{NULL} otherwise.}

\item{event_indicator}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival indicator (1 for
event, 0 for censoring). Only relevant for \code{model_type}="survival";
leave as \code{NULL} otherwise.}

\item{time_horizon}{for survival models, an integer giving the time horizon
(post baseline/time of prediction) at which a prediction is required.
Currently, this must match a time in x$baselinehazard.}

\item{...}{further arguments passed to other methods. See
\code{\link{validate_probabilities}} for more details of arguments that can
be passed}
}
\value{
A list of performance metrics, estimated by applying the existing
prediction model to the newdata.
}
\description{
Validate an existing prediction model, to calculate the predictive
performance against a new (validation) dataset.
}
\details{
This function takes an existing prediction model formatted according
to \code{\link{pred_input_info}}, and calculates measures of predictive
performance on new data (e.g., within an external validation study). The
information about the existing prediction model should first be inputted by
calling \code{\link{pred_input_info}}, before passing the resulting object
to \code{pred_validate}.

\code{newdata} should be a data.frame, where each row should be an
observation (e.g. patient) and each variable/column should be a predictor
variable. The predictor variables need to include (as a minimum) all of the
predictor variables that are included in the existing prediction model
(i.e., each of the variable names supplied to
\code{\link{pred_input_info}}, through the \code{model_info} parameter,
must match the name of a variables in \code{newdata}).

Any factor variables within \code{newdata} must be converted to dummy (0/1)
variables before calling this function. \code{\link{dummyvars}} can help
with this - see examples below.

\code{binary_outcome}, \code{survival_time} and \code{event_indicator} are
used to specify the outcome variable(s) within \code{newdata} (use
\code{binary_outcome} if \code{x$model_type} = "logistic", or use
\code{survival_time} and \code{event_indicator} if \code{x$model_type} =
"survival").

In the case of validating a logistic regression model, \code{pred_validate}
internally calls \code{\link{validate_probabilities}}. See this function
for details on the performance metrics that are estimated.

In the case of validating a survival prediction model,...
}
\examples{
#Example 1 - logistic regression existing model, with outcome specified; uses
#            an example dataset within the package
model1 <- pred_input_info(model_type = "logistic",
                          model_info = SYNPM$Existing_models[1,])
pred_validate(x = model1,
              newdata = SYNPM$ValidationData,
              binary_outcome = "Y")

\dontrun{
#Example 2 - survival model example; uses an example dataset within the
#             package. Also shows use of pre-processing to handle
#             categorical variables - need converting prior to call
SMART_dummaryvars <- dummyvars(SMART)
model2 <- pred_input_info(model_type = "survival",
                          model_info = data.frame("SEX_M" = 0.53,
                                                  "AGE" = -0.05,
                                                  "SYSTBP" = -0.0055,
                                                  "BMIO" = 0.0325,
                                                  "CARDIAC" = -0.126,
                                                  "DIABETES" = -0.461),
                           baselinehazard = data.frame("t" = 1:5,
                                                       "h" = c(0.12, 0.20,
                                                               0.26, 0.33,
                                                               0.38)))
pred_validate(x = model2,
              newdata = SMART_dummaryvars,
              survival_time = "TEVENT",
              event_indicator = "EVENT",
              time_horizon = 2)
}

#Example 3 - multiple existing models
model3 <- pred_input_info(model_type = "logistic",
                          model_info = SYNPM$Existing_models)
pred_validate(x = model3,
              newdata = SYNPM$ValidationData,
              binary_outcome = "Y")

}
\seealso{
\code{\link{pred_input_info}} \code{\link{validate_probabilities}}
}
