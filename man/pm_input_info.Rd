% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pm_input_info.R
\name{pm_input_info}
\alias{pm_input_info}
\title{Input relevant information about an existing prediction model (i.e. the
functional form and published coefficients), and a new dataset, to create a
standardised 'blueprint' for further evaluation.}
\usage{
pm_input_info(
  model_type = c("logistic", "survival"),
  existingcoefs,
  baselinehazard = NULL,
  formula,
  newdata,
  pre_processing = NULL,
  binary_outcome = NULL,
  survivival_time = NULL,
  event_indicator = NULL
)
}
\arguments{
\item{model_type}{specifies the type of model that the existing prediction
model is based on; possible options are: \itemize{ \item {\code{"logistic"}
indicates that the existing model was based on a logistic regression model}
\item {\code{"survival"} indicates that the existing model was based on a
survival regression model} }}

\item{existingcoefs}{a named vector of coefficients, taken exactly as
published from the existing prediction model. Names much match those in
\code{newdata}. See "Details".}

\item{baselinehazard}{A data.frame with two columns: (1) time, and (2)
estimated baseline hazard at that time. Only relevant if \code{model_type}
is "survival"; must be NULL otherwise.}

\item{formula}{an object of class "\code{\link[stats]{formula}}" (or a
character string that can be coerced to that class). This specifies the
functional form description of the existing prediction model. The details
of the model specification are given under "Details".}

\item{newdata}{data frame which will be used to make predictions on using
the existing prediction model. Variable names must match those in
\code{existingcoefs} and \code{formula}, after applying any pre-processing
steps (using \code{pre_processing}) where needed. See "Details".}

\item{pre_processing}{a list where each element is a function that describes
transformations to apply to columns of \code{newdata}. See "Details".}

\item{binary_outcome}{Character variable giving the name of the column in
\code{newdata} that represents the observed outcomes. Only relevant for
\code{model_type}="logistic"; leave as default \code{NULL} otherwise. Leave
as \code{NULL} if \code{newdata} does not contain any outcomes.}

\item{survivival_time}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival times. Only relevant
for \code{model_type}="survival"; leave as default \code{NULL} otherwise.
Leave as \code{NULL} if \code{newdata} does not contain any survival
outcomes.}

\item{event_indicator}{Character variable giving the name of the column in
\code{newdata} that represents the observed survival indicator (1 for
event, 0 for censoring). Only relevant for \code{model_type}="survival";
leave as default \code{NULL} otherwise. Leave as \code{NULL} if
\code{newdata} does not contain any survival outcomes.}
}
\value{
\code{\link{pm_input_info}} returns an object of class "pminfo". This
is a standardised format, such that it can be used with other functions in
the package. An object of class "pminfo" is a list containing at least the
following components: \itemize{\item{model_type = this is the type of
analytical model that the existing prediction model is based upon: either
"logistic" or "survival"} \item{coefs = this is the list of (previously
estimated) coefficients for each predictor included in the existing
prediction model} \item{coef_names = gives the names of each predictor
variable, with corresponding coefficient specified in coefs}
\item{PredictionData = this is the design matrix formed by mapping the
specified \code{pre_processing} steps and functional form of the existing
prediction model specified in \code{formula} onto \code{newdata}; any
predictions will be upon such data.}} More items might be required
depending on the inputs to the function.
}
\description{
Input relevant information about an existing prediction model (i.e. the
functional form and published coefficients), and a new dataset, to create a
standardised 'blueprint' for further evaluation.
}
\details{
This function will structure relevant information about an existing
prediction model, and a new dataset (on which one wishes to make
predictions using the existing model), into a standardised format, such
that it can be used with other functions in the package.

\code{newdata} should be a data.frame, where each row is an observation
(e.g. patient) on which predictions will be made. Each variable/column of
\code{newdata} should include (as a minimum) all of the predictor variables
that are included in the existing prediction model. The names of these
variables/columns should match those provided in \code{formula} and
\code{existingcoefs}.

If the \code{newdata} contains factor/categorical variables, then these
need to be converted to "dummy" variables prior to calling
\code{\link{pm_input_info}}. The function \code{\link{dummyvars}} can
assist with this.

Other variable transformations (e.g. interaction terms, non-linear terms or
splines) can be created within \code{\link{pm_input_info}} by passing
functions into \code{pre_processing}. \code{pre_processing} should be a
list of functions, where each element in the list is named (which will
become the new variable name) with a function that describes what steps to
apply to \code{newdata}. See "Examples" below.

\code{formula} describes the functional form of the existing prediction
model. For example, if the existing prediction model included "age" and
"BMI" as predictor variables, then \code{formula} would be entered as
\code{~ age + BMI}. Each variable name in \code{formula} must have a
corresponding name in \code{newdata} (after applying any
\code{pre_processing} steps). Additionally, each predictor variable
specified in \code{formula} must have a corresponding named element in
\code{existingcoefs}. Only the right hand side of the formula is needed.

\code{existingcoefs} should be provided as a named numeric vector, where
each name directly matches those in \code{formula} and in \code{newdata}
(after applying any \code{pre_processing} steps). The values are the
corresponding coefficient estimates taken \strong{exactly} as published by
the existing model. These coefficients should not be re-evaluated in the
current data, if the \code{newdata} is being used for validation of the
existing prediction model. In the case of model_type = "logistic", the
intercept of the existing prediction model must be named as "(Intercept)".

\code{binary_outcome}, \code{survivival_time} and \code{event_indicator}
are used to specify the outcomes in \code{newdata} if this is relevant. For
example, if validating the existing model, then these specify the columns
in \code{newdata} that will be used for assessing predictive performance of
the predictions in the validation dataset. If the \code{newdata} does not
contain outcomes (e.g. if simply applying/implementing the existing model
in \code{newdata}), then leave these to the default of \code{NULL}. If
\code{model_type} is "logistic" then both \code{survivival_time} and
\code{event_indicator} should be set to NULL; likewise, if
\code{model_type} is "survival", then \code{binary_outcome} should be set
to NULL.
}
\examples{
#Example 1 - basic usage
pm_input_info(model_type = "logistic",
              existingcoefs = c("(Intercept)" = -2, "X" = 0.5),
              baselinehazard = NULL,
              formula = ~X,
              newdata = data.frame("X" = rnorm(100)),
              pre_processing = NULL)


#Example 2 - here, the intercept in existingcoefs is incorrectly named; will
# return error
\dontrun{
pm_input_info(model_type = "logistic",
              existingcoefs = c("Intercept" = -2, "X" = 0.5),
              formula = ~X,
              newdata = data.frame("X" = rnorm(100)),
              pre_processing = NULL)
         }


#Example 3 - here, the existing prediction model is specified as having a
# functional form of X+Z (in 'formula') with corresponding existingcoefs, but
# Z does not exist in newdata (even after any pre_processing); will
# return an error
\dontrun{
pm_input_info(model_type = "logistic",
              existingcoefs = c("(Intercept)" = -2, "X" = 0.5, "Z" = 0.9),
              formula = ~X + Z,
              newdata = data.frame("X" = rnorm(100)),
              pre_processing = NULL)
         }


#Example 4 - shows how to handle categorical variables - must first turn into
# dummy variables before passing to pm_input_info
test_df <- dummyvars(data.frame("X" = rnorm(500),
                                "Colour" = factor(sample(c("red",
                                                           "azure",
                                                           "green",
                                                           "white"),
                                                          500,
                                                          replace = TRUE))))
pm_input_info(model_type = "logistic",
              existingcoefs = c("X" = 0.5,
                                "(Intercept)" = -2,
                                "Colour_green" = 0.5,
                                "Colour_red" = 0.95,
                                "Colour_white" = 2),
              formula = ~X + Colour_green + Colour_red + Colour_white,
              newdata = test_df,
              pre_processing = NULL)


#Example 5 - showing use of pre_processing
pm_input_info(model_type = "logistic",
              existingcoefs = c("(Intercept)" = -2,
                                "Age" = 5,
                                "Age_squared" = 0.05,
                                "Age_logged" = 0.06),
              formula = ~Age + Age_squared + Age_logged,
              newdata = data.frame("Age" = rnorm(100, 50, 0.5)),
              pre_processing = list("Age_squared" = function(df) df$Age^2,
                                    "Age_logged" = function(df) log(df$Age)))

#Example 6 - showing specification of outcome columns in newdata
pm_input_info(model_type = "logistic",
              existingcoefs = c("(Intercept)" = -2,
                                "Age" = 5,
                                "Age_squared" = 0.05,
                                "Age_logged" = 0.06),
              formula = ~Age + Age_squared + Age_logged,
              newdata = data.frame("Y" = rbinom(100, 1, 0.2),
                                   "Age" = rnorm(100, 50, 0.5)),
              pre_processing = list("Age_squared" = function(df) df$Age^2,
                                    "Age_logged" = function(df) log(df$Age)),
              binary_outcome = "Y")


#Example 7 - survival model example
pm_input_info(model_type = "survival",
              existingcoefs = c("Age" = 5,
                                "Age_squared" = 0.05,
                                "Age_logged" = 0.06),
              formula = ~Age + Age_squared + Age_logged,
              newdata = data.frame("Age" = rnorm(100, 50, 0.5)),
              baselinehazard = data.frame("t" = c(1,2),
                                          "h" = c(0.5, 0.6)),
              pre_processing = list("Age_squared" = function(df) df$Age^2,
                                    "Age_logged" = function(df) log(df$Age)))
}
